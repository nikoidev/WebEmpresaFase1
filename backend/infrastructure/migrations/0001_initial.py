# Generated by Django 5.2.6 on 2025-09-10 13:14

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AWSInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instance_id', models.CharField(max_length=50, unique=True, verbose_name='Instance ID')),
                ('instance_type', models.CharField(max_length=50, verbose_name='Tipo de Instancia')),
                ('availability_zone', models.CharField(max_length=50, verbose_name='Zona de Disponibilidad')),
                ('state', models.CharField(choices=[('pending', 'Pendiente'), ('running', 'Ejecutando'), ('shutting-down', 'Apagándose'), ('terminated', 'Terminada'), ('stopping', 'Deteniéndose'), ('stopped', 'Detenida')], max_length=20, verbose_name='Estado')),
                ('public_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Pública')),
                ('private_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Privada')),
                ('security_groups', models.JSONField(default=list, verbose_name='Grupos de Seguridad')),
                ('auto_scaling_group', models.CharField(blank=True, max_length=100, verbose_name='Auto Scaling Group')),
                ('min_size', models.IntegerField(default=1, verbose_name='Tamaño Mínimo')),
                ('max_size', models.IntegerField(default=3, verbose_name='Tamaño Máximo')),
                ('desired_capacity', models.IntegerField(default=1, verbose_name='Capacidad Deseada')),
                ('launch_time', models.DateTimeField(blank=True, null=True, verbose_name='Tiempo de Lanzamiento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aws_instances', to='clients.client')),
            ],
            options={
                'verbose_name': 'Instancia AWS',
                'verbose_name_plural': 'Instancias AWS',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InfrastructureMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('cpu_utilization', models.FloatField(verbose_name='Utilización de CPU (%)')),
                ('memory_utilization', models.FloatField(verbose_name='Utilización de Memoria (%)')),
                ('disk_utilization', models.FloatField(verbose_name='Utilización de Disco (%)')),
                ('network_in', models.FloatField(verbose_name='Red Entrada (MB)')),
                ('network_out', models.FloatField(verbose_name='Red Salida (MB)')),
                ('request_count', models.IntegerField(default=0, verbose_name='Cantidad de Requests')),
                ('response_time', models.FloatField(default=0, verbose_name='Tiempo de Respuesta (ms)')),
                ('error_rate', models.FloatField(default=0, verbose_name='Tasa de Error (%)')),
                ('health_status', models.CharField(choices=[('healthy', 'Saludable'), ('warning', 'Advertencia'), ('critical', 'Crítico')], default='healthy', max_length=20, verbose_name='Estado de Salud')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infrastructure_metrics', to='clients.client')),
            ],
            options={
                'verbose_name': 'Métrica de Infraestructura',
                'verbose_name_plural': 'Métricas de Infraestructura',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LoadBalancer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lb_arn', models.CharField(max_length=255, unique=True, verbose_name='ARN del Load Balancer')),
                ('lb_name', models.CharField(max_length=100, verbose_name='Nombre del Load Balancer')),
                ('dns_name', models.CharField(max_length=255, verbose_name='Nombre DNS')),
                ('state', models.CharField(choices=[('provisioning', 'Aprovisionando'), ('active', 'Activo'), ('active_impaired', 'Activo con Problemas'), ('failed', 'Fallido')], max_length=20, verbose_name='Estado')),
                ('scheme', models.CharField(choices=[('internet-facing', 'Orientado a Internet'), ('internal', 'Interno')], default='internet-facing', max_length=20, verbose_name='Esquema')),
                ('vpc_id', models.CharField(max_length=50, verbose_name='VPC ID')),
                ('availability_zones', models.JSONField(default=list, verbose_name='Zonas de Disponibilidad')),
                ('security_groups', models.JSONField(default=list, verbose_name='Grupos de Seguridad')),
                ('created_time', models.DateTimeField(blank=True, null=True, verbose_name='Tiempo de Creación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='load_balancer', to='clients.client')),
            ],
            options={
                'verbose_name': 'Load Balancer',
                'verbose_name_plural': 'Load Balancers',
            },
        ),
        migrations.CreateModel(
            name='S3Bucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bucket_name', models.CharField(max_length=100, unique=True, verbose_name='Nombre del Bucket')),
                ('region', models.CharField(max_length=50, verbose_name='Región')),
                ('public_read', models.BooleanField(default=False, verbose_name='Lectura Pública')),
                ('versioning_enabled', models.BooleanField(default=False, verbose_name='Versionado Habilitado')),
                ('encryption_enabled', models.BooleanField(default=True, verbose_name='Encriptación Habilitada')),
                ('total_size_bytes', models.BigIntegerField(default=0, verbose_name='Tamaño Total (Bytes)')),
                ('object_count', models.IntegerField(default=0, verbose_name='Cantidad de Objetos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s3_buckets', to='clients.client')),
            ],
            options={
                'verbose_name': 'Bucket S3',
                'verbose_name_plural': 'Buckets S3',
            },
        ),
    ]
